# we are using separate workflow because CI producing test binaries with CPPFLAGS=-DTESTMODE

name: Komodo CD test releases


on:
  push:
    branches:
    - master
    - beta
    - dev
    - research
    - websockets
    - tokens

jobs:

  # check build instructions here https://github.com/chips-blockchain/chips/blob/master/build.sh 
  linux-build:
    name: Linux Build
    # using there as old release as possible with GHA worker to provide better compatibility
    runs-on: ubuntu-16.04
    steps:

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Shortify commit sha
        shell: bash
        run: echo "##[set-output name=sha_short;]$(echo ${GITHUB_SHA::7})"
        id: shortify_commit

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install deps (Linux)
        run: |
          sudo apt-get update  # prevents repo404 errors on apt-remove below
          sudo apt-get remove php5.6-fpm php7.0-fpm php7.1-fpm php7.2-fpm php7.3-fpm php7.3-common php7.4-fpm msodbcsql17 mysql-server*
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get upgrade -y
          sudo apt-get install -q curl \ python3 python3-dev python3-setuptools python3-pip libcurl4-openssl-dev libssl-dev -y
          sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils libevent-dev libboost-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libzmq3-dev
      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: |
            git clone https://github.com/who-biz/bitcoin chips
            cd chips
            git checkout who-biz
            ./autogen.sh
            ./configure --with-gui=no --disable-tests --without-miniupnpc --enable-experimental-asm --enable-static --disable-shared --with-incompatible-bdb
            make -j$(nproc) 
            zip --junk-paths chips-osx src/chipsd src/chips-cli
      - name: Upload chips-linux.zip as artifact
        uses: actions/upload-artifact@v1
        with:
          name: chips-linux
          path: ./chips/chips-linux.zip

  osx-build:
    name: OSX Build
    runs-on: macos-10.14
    steps:
      - uses: actions/checkout@v2
      - name: Install deps (macOS)
        continue-on-error: true
        run: |
          brew update
          brew upgrade
          brew tap discoteq/discoteq; brew install flock
          # ref: https://github.com/bitcoin/bitcoin/blob/master/doc/build-osx.md
          # note: run brew install libnatpmp if you use pre-built chipsd from this repo
          brew install gcc@8 berkeley-db@4 binutils protobuf coreutils wget python3 \
                autoconf autogen automake libtool boost pkg-config libevent zeromq libnatpmp miniupnpc
      - name: Build (macOS)
        run: |
          git clone https://github.com/who-biz/bitcoin chips
          cd chips
          git checkout who-biz
          ./autogen.sh
          ./configure --with-gui=no --disable-tests --without-miniupnpc --enable-experimental-asm --enable-static --disable-shared
          make
          zip --junk-paths chips-osx src/chipsd src/chips-cli
      - name: Upload chips-osx.zip as artifact
        uses: actions/upload-artifact@v1
        with:
          name: chips-osx
          path: ./chips/chips-osx.zip

  publish-release:
      name: Publishing CD releases
      runs-on: ubuntu-latest
      #needs: [linux-build, osx-build]
      needs: [osx-build]
      steps:
        - name: Download chips-linux.zip
          uses: actions/download-artifact@v1
          with:
            name: chips-linux  
        - name: Download chips-osx.zip
          uses: actions/download-artifact@v1
          with:
            name: chips-osx

        - name: Extract branch name
          shell: bash
          run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          id: extract_branch

        - name: Shortify commit sha
          shell: bash
          run: echo "##[set-output name=sha_short;]$(echo ${GITHUB_SHA::7})"
          id: shortify_commit

        - name: Create Release
          id: create_release
          uses: actions/create-release@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: cd_release_${{ steps.shortify_commit.outputs.sha_short }}_${{ steps.extract_branch.outputs.branch }}
            release_name: CD Release ${{ steps.shortify_commit.outputs.sha_short }} ${{ steps.extract_branch.outputs.branch }}
            draft: false
            prerelease: true
        - name: Upload Linux Release Asset
          id: upload-linux-release-asset 
          uses: actions/upload-release-asset@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
            asset_path: chips-linux/chips-linux.zip
            asset_name: chips_${{ steps.shortify_commit.outputs.sha_short }}_${{ steps.extract_branch.outputs.branch }}_linux.zip
            asset_content_type: application/zip
        - name: Upload OSX Release Asset
          id: upload-osx-release-asset 
          uses: actions/upload-release-asset@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
            asset_path: chips-osx/chips-osx.zip
            asset_name: chips_${{ steps.shortify_commit.outputs.sha_short }}_${{ steps.extract_branch.outputs.branch }}_osx.zip
            asset_content_type: application/zip
